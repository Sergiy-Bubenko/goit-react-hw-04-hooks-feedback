{"version":3,"sources":["components/Section/Section.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js","components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css"],"names":["Section","this","props","title","children","Component","Statistics","good","neutral","bad","total","positivePercentage","className","s","statistics","statisticsValue","FeedbackOptions","onLeaveFeedback","btn","type","name","onClick","Notification","message","App","state","positiveFeedback","handleGoFeedback","e","target","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","toFixed","options","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.57427861.chunk.js","sourcesContent":["import { Component } from 'react';\n\nclass Section extends Component {\n  render() {\n    const { title, children } = this.props;\n    return (\n      <section>\n        <h1>{title}</h1>\n        {children}\n      </section>\n    );\n  }\n}\n\nexport default Section;\n","import { Component } from 'react';\nimport s from './Statistics.module.css';\n\nclass Statistics extends Component {\n  render() {\n    const { good, neutral, bad, total, positivePercentage } = this.props;\n    return (\n      <div className={s.statistics}>\n        <span>\n          Good:<span className={s.statisticsValue}>{good}</span>\n        </span>\n        <span>\n          Neutral:<span className={s.statisticsValue}>{neutral}</span>\n        </span>\n        <span>\n          Bad:<span className={s.statisticsValue}>{bad}</span>\n        </span>\n        <span>\n          Total:<span className={s.statisticsValue}>{total}</span>\n        </span>\n        <span>\n          Positive feedback:\n          <span className={s.statisticsValue}>{positivePercentage}</span>%\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default Statistics;\n","import { Component } from 'react';\nimport s from './FeedbackOptions.module.css';\n\nclass FeedbackOptions extends Component {\n  render() {\n    const onLeaveFeedback = this.props.onLeaveFeedback;\n    return (\n      <>\n        <button\n          className={s.btn}\n          type=\"button\"\n          name=\"good\"\n          onClick={onLeaveFeedback}\n        >\n          Good\n        </button>\n        <button\n          className={s.btn}\n          type=\"button\"\n          name=\"neutral\"\n          onClick={onLeaveFeedback}\n        >\n          Neutral\n        </button>\n        <button\n          className={s.btn}\n          type=\"button\"\n          name=\"bad\"\n          onClick={onLeaveFeedback}\n        >\n          Bad\n        </button>\n      </>\n    );\n  }\n}\n\nexport default FeedbackOptions;\n","function Notification({ message }) {\n  return <h2>{message}</h2>;\n}\n\nexport default Notification;\n","import { Component } from 'react';\n\nimport './App.css';\n\nimport Section from './components/Section/Section';\nimport Statistics from './components/Statistics/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Notification from './components/Notification/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n    total: 0,\n    positiveFeedback: 0,\n  };\n\n  handleGoFeedback = e => {\n    const name = e.target.name;\n    this.setState(prevState => {\n      return {\n        [name]: prevState[name] + 1,\n      };\n    });\n    this.countTotalFeedback();\n    this.countPositiveFeedbackPercentage();\n  };\n\n  countTotalFeedback = () => {\n    this.setState(prevState => {\n      return { total: prevState.total + 1 };\n    });\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    this.setState(prevState => {\n      return {\n        positiveFeedback: ((prevState.good / prevState.total) * 100).toFixed(),\n      };\n    });\n  };\n\n  render() {\n    const { good, neutral, bad, total, positiveFeedback } = this.state;\n    return (\n      <div className=\"App\">\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={this.state}\n            onLeaveFeedback={this.handleGoFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {total === 0 ? (\n            <Notification message=\"No feedback given\" />\n          ) : (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positiveFeedback}\n            />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistics\":\"Statistics_statistics__10GSh\",\"statisticsValue\":\"Statistics_statisticsValue__1tM_2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"FeedbackOptions_btn__3pZ6v\"};"],"sourceRoot":""}